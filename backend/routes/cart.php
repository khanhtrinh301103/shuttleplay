<?php
// File location: backend/routes/cart.php

use Illuminate\Support\Facades\Route;
use App\Http\Controllers\CartController;

/*
|--------------------------------------------------------------------------
| Shopping Cart Routes
|--------------------------------------------------------------------------
|
| Routes cho qu·∫£n l√Ω gi·ªè h√†ng c·ªßa customer
| T·∫•t c·∫£ routes ƒë·ªÅu y√™u c·∫ßu authentication v√† role customer
|
*/

Route::middleware('auth:sanctum')->group(function () {
    
    /*
    |--------------------------------------------------------------------------
    | Customer Cart Routes
    |--------------------------------------------------------------------------
    */
    
    // Ch·ªâ customer m·ªõi ƒë∆∞·ª£c truy c·∫≠p cart
    Route::middleware(['role:customer'])->group(function () {
        
        /*
        |--------------------------------------------------------------------------
        | Basic Cart Operations
        |--------------------------------------------------------------------------
        */
        
        // L·∫•y gi·ªè h√†ng hi·ªán t·∫°i v·ªõi t·∫•t c·∫£ items
        Route::get('/cart', [CartController::class, 'index']);
        
        // Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
        Route::post('/cart/add', [CartController::class, 'addToCart']);
        
        // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng item trong gi·ªè h√†ng
        Route::put('/cart/items/{cartItemId}', [CartController::class, 'updateCartItem'])
            ->where('cartItemId', '[0-9]+');
        
        // X√≥a item kh·ªèi gi·ªè h√†ng
        Route::delete('/cart/items/{cartItemId}', [CartController::class, 'removeFromCart'])
            ->where('cartItemId', '[0-9]+');
        
        // X√≥a t·∫•t c·∫£ items trong gi·ªè h√†ng
        Route::delete('/cart/clear', [CartController::class, 'clearCart']);
        
        /*
        |--------------------------------------------------------------------------
        | Cart Information & Utilities
        |--------------------------------------------------------------------------
        */
        
        // L·∫•y s·ªë l∆∞·ª£ng items trong gi·ªè h√†ng (quick check cho header/badge)
        Route::get('/cart/count', [CartController::class, 'getCartCount']);
        
        // Validate v√† clean up gi·ªè h√†ng (x√≥a items kh√¥ng available)
        Route::post('/cart/validate', [CartController::class, 'validateCart']);
        
        // L·∫•y th·ªëng k√™ gi·ªè h√†ng
        Route::get('/cart/stats', [CartController::class, 'getCartStats']);
        
        /*
        |--------------------------------------------------------------------------
        | Guest Cart Integration
        |--------------------------------------------------------------------------
        */
        
        // Merge guest cart v·ªõi user cart (d√πng khi user login)
        Route::post('/cart/merge-guest', [CartController::class, 'mergeGuestCart']);
        
    });

});

/*
|--------------------------------------------------------------------------
| API Documentation
|--------------------------------------------------------------------------
*/

/*
üõí SHOPPING CART API ENDPOINTS:

1. GET /api/cart
   - L·∫•y gi·ªè h√†ng hi·ªán t·∫°i v·ªõi t·∫•t c·∫£ items v√† product details
   - Response: CartResource v·ªõi items, summary, status

2. POST /api/cart/add
   - Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
   - Body: {product_id: int, quantity: int}
   - Logic: N·∫øu product ƒë√£ c√≥ th√¨ tƒÉng quantity, n·∫øu ch∆∞a th√¨ t·∫°o m·ªõi

3. PUT /api/cart/items/{cartItemId}
   - C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng item
   - Body: {quantity: int}
   - Logic: quantity = 0 s·∫Ω x√≥a item

4. DELETE /api/cart/items/{cartItemId}
   - X√≥a item kh·ªèi gi·ªè h√†ng

5. DELETE /api/cart/clear
   - X√≥a t·∫•t c·∫£ items trong gi·ªè h√†ng

6. GET /api/cart/count
   - L·∫•y t·ªïng s·ªë items trong cart (cho header badge)
   - Response: {total_items: int, cart_id: int}

7. POST /api/cart/validate
   - Validate cart v√† clean up items kh√¥ng available
   - Response: cart + danh s√°ch items b·ªã x√≥a/c·∫≠p nh·∫≠t

8. GET /api/cart/stats
   - L·∫•y th·ªëng k√™ chi ti·∫øt v·ªÅ cart
   - Response: total amount, average price, sellers count, etc.

9. POST /api/cart/merge-guest
   - Merge guest cart v·ªõi user cart (khi user login)
   - Body: {guest_cart_items: [{product_id, quantity}]}

EXAMPLE USAGE:

// 1. Th√™m s·∫£n ph·∫©m v√†o cart
POST /api/cart/add
{
    "product_id": 123,
    "quantity": 2
}

// 2. C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng
PUT /api/cart/items/456
{
    "quantity": 3
}

// 3. L·∫•y cart v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin
GET /api/cart

// 4. L·∫•y s·ªë l∆∞·ª£ng items cho header
GET /api/cart/count

// 5. Validate cart tr∆∞·ªõc khi checkout
POST /api/cart/validate

FEATURES:
‚úÖ Auto-create cart khi user add item ƒë·∫ßu ti√™n
‚úÖ Stock validation khi add/update
‚úÖ Prevent buying own products
‚úÖ Clean up unavailable items
‚úÖ Support merge guest cart
‚úÖ Comprehensive error handling
‚úÖ Rich product information in responses
‚úÖ Price calculation with quantity
‚úÖ Image optimization with multiple sizes
‚úÖ Cart statistics and summary

*/